// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery.turbolinks
//= require jquery_ujs
//= require bootstrap.min
//= require bootstrap-sprockets
//= require_tree .
//= require turbolinks
//= require underscore-min
//= require gmaps/google
//= require swipebox
//= require jquery.grid-a-licious.min

// start-top-nav-script
$(window).load(function() {
  var pull 		= $('#pull');
    menu 		= $('nav ul');
    menuHeight	= menu.height();
    $(pull).on('click', function(e) {
      e.preventDefault();
      menu.slideToggle();
    });

  $(window).resize(function(){
    var w = $(window).width();
    if(w > 320 && menu.is(':hidden')) {
      menu.removeAttr('style');
    }
  });
});
// End-top-nav-script

// change icon, when window is being resized
$(document).ready(function(){
  // smooth scrolling
  $(".scroll").click(function(event){
    event.preventDefault();
    $('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
  });

  // dropdown menu
  $('.dropdown-toggle').dropdown();

  // logo resize according to windows size
  function logoResize() {
    var windos_size = $(window).width();
    var img = document.createElement("img");
    img.title = 'Aufbau Ost-Berlin';
    img.style.height =" 80px";

    if (windos_size > '1000') {
      img.src='<%=image_url("icons/icon_long_80h.png")%>';
    } else {
      img.src='<%=image_url("icons/icon_yellow_80h.png")%>';
    }

    $('a.navbar-brand').html(img);
  }

  logoResize();

  $(window).resize(logoResize);

  // swipebox function
  $( '.swipebox' ).swipebox();

})

function findMarker(i){
  console.log(Gmaps.store.markers.length);

  for (var l=0; l<Gmaps.store.markers.length; ++l){
    marker = Gmaps.store.markers[l];
    // console.log(marker.getServiceObject().id);
    if (marker.getServiceObject().id == i ) {
      // console.log('Found marker!');
      return marker;
    }
  }
  console.log('Didnt find marker!');
  return Gmaps.store.markers[0];
}

function bindGridItemsToMarker(){
  $('.grid-item').on('click', function(){
    // console.log("----------");
    i = $(this).attr('id');
    // console.log(i);

    marker = findMarker(i);
    // console.log(marker.getServiceObject().id);

    Gmaps.store.handler.getMap();
    marker.setMap(Gmaps.store.handler.getMap()); //because clusterer removes map property from marker
    marker.panTo();
    // console.log('marker.id = ' + marker.getServiceObject().id);
    google.maps.event.trigger(marker.getServiceObject(), 'click');
    Gmaps.store.handler.fitMapToBounds();
  });
}

function buildGridItem(json){
  var bgColor;

  switch(json.tour_id) {
    case 1: bgColor = '#F16745'; // red
            break;
    case 2: bgColor = '#3e8fae'; // blue
            break;
    case 3: bgColor = '#8dcd91'; // green
            break;
    case 4: bgColor = '#4CC3D9';
            break;
    default:
      bgColor = '#D4D4D4';
  }

  div = document.createElement('div');
  div.setAttribute('class', 'grid-item');
  div.setAttribute('id', json.id);
  div.style.background = bgColor;
  div.innerHTML = ("<a href='#map-anchor'><span class='glyphicon glyphicon-map-marker'></span> " + json.name + "</a>");

  return div;
}

function buildBuildingsList(json_array){
  _.each(json_array, function(json){
    $address = $( buildGridItem(json) );
    $("#buildings-grid").append($address);
  });
  // grid-a-licious funtions
  $('#buildings-grid').gridalicious({
    gutter: 20,
    width: 250,
    selector: '.grid-item'
  });
}

Gmaps.store = {};

function buildingsMap(json_array){
  Gmaps.store.handler = Gmaps.build('Google');
  Gmaps.store.handler.buildMap({ provider:{}, internal: {id: 'buildings-map'}}, function(){

    Gmaps.store.markers = Gmaps.store.handler.addMarkers(json_array);

    _.each(json_array, function(json, index){
      marker = Gmaps.store.markers[index];
      marker.serviceObject.set('id', json.id);
      json.marker = marker;
    });

    Gmaps.store.handler.bounds.extendWith(Gmaps.store.markers);
    Gmaps.store.handler.fitMapToBounds();
  });
}
